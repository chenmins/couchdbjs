{
  "name": "Couchdbjs",
  "tagline": "A node client for couchdb.",
  "body": "# couchdbjs\r\n\r\ncouchdbjs is node.js client for couchdb.\r\n\r\n[![NPM](https://nodei.co/npm/couchdbjs.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/couchdbjs/)\r\n\r\n### Install\r\n```shell\r\n$ npm install couchdbjs --save\r\n```\r\n\r\n### Create a couchdbjs object\r\n```js\r\nconst Couchdbjs = require('couchdbjs');\r\nconst db = new Couchdbjs(dbname, options);\r\n```\r\nNote : Here DB is the object of the class couchdbjs.\r\n\r\nHere `options` is an optional js object containing the configuration.\r\nThis is the default configuration.\r\n```js\r\n{\r\n    protocol : 'http:',\r\n    hostname: 'localhost',\r\n    port: 5984\r\n}\r\n```\r\n`dbname` is the name of the database.\r\n\r\n### Generate a new uuid\r\n```js\r\nCouchdbjs.getNewId(options, cb);\r\n```\r\nHere `options` is optional configuration object.\r\nThis is the default configuration.\r\n```js\r\n{\r\n    protocol : 'http:',\r\n    hostname : 'localhost',\r\n    port: 5984\r\n    count : 1\r\n}\r\n```\r\n`cb` is reqired callback function with two parameters `err` and `data`.\r\nTo avoid writing configurations for protocol, hostname and port again the function `getConfig` can be called on existing database object.\r\n```js\r\ndb.getConfig({count : 1});\r\n```\r\nreturns\r\n```js\r\n{\r\n    protocol : 'http:',\r\n    hostname : 'localhost',\r\n    port: 5984\r\n    count : 1\r\n}\r\n```\r\nComplete Example :\r\n```js\r\nCouchdbjs.getNewId(db.getConfig({count : 1}, function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data[0]); // data is array of uuids\r\n}));\r\n```\r\n\r\n### Create a new database\r\n```js\r\nconst db = new Couchdbjs('dbname', options);\r\n```\r\nThis creates a database when a database with name `dbname` doesn't exist.\r\nDatabase can also be created using `Couchdbjs.createDB` function.\r\n```js\r\nCouchdbjs.createDB({\r\n    protocol: 'http:',\r\n    hostname: 'localhost',\r\n    port: 5984,\r\n    db: 'dbanme'\r\n}, function(err, data)=>{\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\n\r\n### Delete a database\r\nDatabase can be deleted using function `Couchdbjs.deleteDB` similar to `Couchdbjs.createDB`.\r\n```js\r\nCouchdbjs.deleteDB({\r\n    protocol: 'http:',\r\n    hostname: 'localhost',\r\n    port: 5984,\r\n    db: 'dbanme'\r\n}, function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n\r\n```\r\n\r\n### List all documents in a database\r\n```js\r\ndb.getAllDocs(function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\n\r\n### Create a new document\r\n```js\r\ndb.createDoc(id, document, cb);\r\n```\r\n`id` is the id of the document to be used.\r\n`document` is the object to be stored in the document.\r\n`cb` is the callback function with parameters `err` and `data`.\r\nExample\r\n```js\r\ndb.createDoc('id_doc', {a:1, b:2, c:[5, 'k']}, function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\n\r\n### Get document\r\n```js\r\ndb.deleteDoc(id, cb);\r\n```\r\n`id` is the id of the document.\r\n`cb` is the callback function with parameters `err` and `data`.\r\nExample\r\n```js\r\ndb.getDoc('id_doc', function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\n\r\n### Update a document\r\n```js\r\ndb.updateDoc(id, doc, cb);\r\n```\r\n`id`, `doc`, `cb` are id of document to be updated, document object with filed to be updated and callback function with parameters `err` and `data` respectively.\r\nExample\r\nSuppose this a document already present\r\n```js\r\n{\r\n    'id': 'id_doc',\r\n    '_rev': '1-1357',\r\n    'a': 1,\r\n    'b': 'asd'\r\n}\r\n```\r\nIf the following function is used to update the document\r\n```js\r\ndb.upadteDoc('id_doc', {b: 'cs', c: 5}, function(err, data) {});\r\n```\r\nthen the final document will be\r\n```js\r\n{\r\n    'id': 'id_doc',\r\n    '_rev': '2-2468',\r\n    'a': 1,\r\n    'b': 'cs',\r\n    'c': 5\r\n}\r\n```\r\nAfter that if the following function is used to update the document\r\n```js\r\ndb.upadteDoc('id_doc', {b: 'cse', a: undefined}, function(err, data) {});\r\n```\r\nthen the final document will be\r\n```js\r\n{\r\n    'id': 'id_doc',\r\n    '_rev': '3-3579',\r\n    'b': 'cse',\r\n    'c': 5\r\n}\r\n```\r\nTo update whole document by overwriting the existing one use\r\n```js\r\ndb.createDoc(id, doc, cb);\r\n```\r\nwith `_rev` field in the `doc` document.\r\n\r\n### Delete a document\r\n```js\r\ndb.deleteDoc(id, function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\n\r\n### Attach files to a document\r\n```js\r\ndb.attachFileToDoc(id, rev, file, cb);\r\n```\r\nExample\r\n```js\r\ndb.attachFileToDoc('id_doc', '3-3579', {\r\n    name: 'pic.jpg',\r\n    path: '/home/user/image.jpg'\r\n    mimetype: 'image/jpeg'\r\n}, function(err, data) {\r\n    if (err) console.error(err);\r\n    else console.log(data);\r\n});\r\n```\r\nHere the file gets uploaded to <http://localhost:5984/db_name/id_doc/pic.jpg>.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}